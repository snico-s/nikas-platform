generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis(version: "3.3.2"), uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Track         Track[]
  Expense       Expense[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Track {
  id         String                   @id @default(cuid())
  track      Unsupported("geography")
  properties Json
  date       DateTime
  distance   Float
  createdAt  DateTime                 @default(now()) @map("created_at")
  createdBy  String?                  @map("created_by")

  User User? @relation(fields: [createdBy], references: [id])

  @@index([track], map: "restaurants_geo_index_track", type: Gist)
}

model Expense {
  id          Int      @id @default(autoincrement())
  amount      Float
  categoryId  String?
  description String?
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  currencyId  Int
  createdBy   String

  Category ExpenseCategory? @relation(fields: [categoryId], references: [category])
  User     User?            @relation(fields: [createdBy], references: [id])
  Currency Currency?        @relation(fields: [currencyId], references: [id])
}

model ExpenseCategory {
  category String    @id @unique
  Expense  Expense[]
}

model Currency {
  id       Int     @id @default(autoincrement())
  currency String
  code     String  @unique
  symbol   String?

  baseExchangeRates   ExchangeRate[] @relation("BaseCurrency")
  targetExchangeRates ExchangeRate[] @relation("TargetCurrency")
  Expense             Expense[]
}

model ExchangeRate {
  id               Int   @id @default(autoincrement())
  rate             Float
  baseCurrencyId   Int
  targetCurrencyId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  baseCurrency   Currency? @relation("BaseCurrency", fields: [baseCurrencyId], references: [id])
  targetCurrency Currency? @relation("TargetCurrency", fields: [targetCurrencyId], references: [id])
}
